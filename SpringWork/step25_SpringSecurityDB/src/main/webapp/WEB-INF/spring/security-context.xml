<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- 비밀번호 암호화 bean 설정 -->
	<bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="passwordEncoder"/>
	


	<!-- 클라이언트 요청을 가로챌 정보를 설정 
	auto-config="true" spring security의 기본 설정을 그대로 따라가겠다 
		use-expression="true" 는 spring의 SpEL을 사용함 -->
		

	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/member/main" access="isAuthenticated()" /> <!-- 어찌됐든 인증만 하면 됨 -->
		<security:intercept-url pattern="/admin/main" access="hasRole('ROLE_ADMIN')" /> <!-- 어드민 ROLE을 주고 싶음  -->
		<security:form-login
		login-page="/member/loginForm"
		username-parameter="id" 
		password-parameter="password"
		login-processing-url="/login"
		default-target-url="/"
		authentication-failure-handler-ref="memberAuthenticationFailHandler"
		/>
		<!-- login-page="/user/loginForm"는 처음 인증되지 않았을 때 와야할 곳  -->
		<!-- password-parameter="pwd"의 loginForm에서 전송되는 name 값  -->
		<!-- default-target-url="/" 는 homeController의 "/"를 실행  -->
		<!-- authentication-failure-forward-url="/user/loginForm" 실패했을 때 가야 할 곳 -->
		
		
		<security:logout
		logout-url="/member/logout"
		invalidate-session="true"
		delete-cookies="JSESSIONID"
		logout-success-url="/"
		/>
	</security:http>

	<!-- spring security가 제공하는 in-memory 기능 설정 -->
	<security:authentication-manager>
		<security:authentication-provider ref="memberAuthenticationProvider"/>
	</security:authentication-manager>


</beans>
