<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">




	<!-- <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		p:driverClassName="oracle.jdbc.OracleDriver" p:url="jdbc:oracle:thin:@127.0.0.1:1521:xe" 
		p:username="scott" p:password="tiger" p:maxActive="10"/> -->



	<!-- 외부설정문서(properties파일) 가져오기 -->
	<beans:bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations"><!-- setLocations()호출 -->
			<beans:value>/WEB-INF/spring/appServlet/dbInfo.properties
			</beans:value>
		</beans:property>
	</beans:bean>

	<!-- oracle 연결!!!!! -->
	<beans:bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		p:driverClassName="${driver}" p:url="${url}" p:username="${username}"
		p:password="${password}" p:maxActive="10" />




	<!-- <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" 
		p:dataSource-ref="dataSource" p:configLocation="classpath:kdb/spring/conf/SqlMapConfig.xml" 
		/> -->


	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
		<beans:property name="typeAliasesPackage" value="kosta.web.mvc.board.dto, kosta.web.mvc.user.dto" />
		<!-- <beans:property name="configLocation" value="classpath:config/SqlMapConfig.xml"/> -->
	</beans:bean>

	<!-- 인터페이스 기반 mapper 만들 때 필요 <beans:bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<beans:property name="mapperInterface" value="kosta.mvc.model.repository.StudentMapper" 
		/> <beans:property name="sqlSessionFactory" ref="sqlSessionFactory" /> </beans:bean> -->


	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0"
			ref="sqlSessionFactory" /> <!-- 기본생성자 없기때문에 주입시켜줘야함 -->
	</beans:bean>


	<!-- Spring Transaction 설정 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:constructor-arg ref="dataSource" />
	</beans:bean>

	<!-- transactinoManager가 관리해야 하는 것이 transaction에 대한 것을 관리해라 -->
	<!-- <tx:advice transaction-manager="transactionManager"
		id="txAdvice">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(public * kosta.mvc.service.*ServiceImpl.*(..))" />
	</aop:config> -->
 <tx:annotation-driven transaction-manager="transactionManager"/>
</beans:beans>