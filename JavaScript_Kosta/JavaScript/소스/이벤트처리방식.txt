
1. 고전적방식(직접적으로 이벤트 핸들러 등록)

     <h1 onclick="check()" >고전적 이벤트 등록</h1>

   단점 : 이벤트 핸들러가 HTML코드에 섞여 있어 소스가 복잡해짐.
         
   
2. 자바스크립트 내부에서 등록

   이벤트주체.onclick = check;  


3. Dom레벨 2 이벤트 등록
    - IE 브라우져 (8 이전)
   이벤트주체.attachEvent("이벤트종류", 함수이름);
             *이벤트류 - onxxx
             * 버블링만 가능

   이벤트주체.detachEvent("이벤트종류", 함수이름); =>할당된 이벤트 제거

   - 기타브라우져(W3C인경우-IE9포함)'
    이벤트주체.addEventListener("이벤트종류", 함수이름 , false);
             *이벤트류 - xxx => on은 생략한다.
             * 세번째 인수 true - 캡쳐링(밖-> 안)
                           false - 버블링(안-> 밖)

   이벤트주체.removeEventListener("이벤트종류", 함수이름 , false); =>할당된 이벤트 제거


   * 이벤트 호출의 2가지 타입
    1. 캡춰링(capturing) - IE계열은 지원안함.
       => Dom트리의 가장 바깥요소에서 부터 시작하여, 이벤트가 일어난 요소에 도착 할때 까지 안쪽으로 찾아 들어가고
          다시 바깥으로 나온다. 예를 들어 웹 피에지에서 무언가를 클릭하면 처음에는 HTML요소에서 onclick 이벤트 핸들러를
          찾고 다음에는 body요소에서 찾고, 다음에는 다음에는 하는 식으로 이벤트가 일어난 요소에 도착 할때 까지 반복한다


    2. 버블링(bubbling) 
        => 이벤트가 일어난 요소에서 부터 체크 이요소에 뭔가 이벤트 핸들러가 할당되어 있는지를 시작해서 
           그 부모 요소로, 그 부모요소로 하는 식으로 html요소까지 거슬러 올라간다.




  * IE는 버블링만 가능하므로 동일하게 이벤트 호출이 가능하도록 버블링을 사용한다.


----------------------------------------------------------------------
 * 자바스크립트 함수 안에서 event 객체를 얻어오는 방법
   1. IE 8 이전 : window.event 

   2. IE 8 제외한 브라우져 : event 
       (단, 파이어폭스는 함수의 인수로 event를 받아야 한다)

     * 크로스브라우징 가능하도록 하기 위해
      
       if(!event) event = window.event ;

    *  event에 대한 대상을 얻어오기
       - IE 8 이전 : event.srcElement 
       - IE 8 제외한 브라우져 : event.target

         var target = event.target ? event.target : event.srcElement;        



  


















