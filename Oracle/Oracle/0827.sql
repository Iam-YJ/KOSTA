/*
 JOIN
  : 한번의 SELECT문장으로 2개이상의 테이블에 있는 컬럼의 정보를 검색하고자
    할때 사용한다.
  : JOIN의 종류
    1) INNER JOIN = EQ JOIN = 등등조인 = NATURAL JOIN
    
    2) OUTER JOIN
        - LEFT OUTER JOIN
        - RIGHT OUTER JOIN
        - FULL OUTER JOIN
        
    3) SELF JOIN 
    
   : JOIN을 코딩하는 방식
     1) SQL JOIN방식 : FULL OUTER JOIN은 지원하지 않음.
     2) ANSI JOIN방식 : 표준이기 때문에 권장 
*/
SELECT * FROM EMP;
SELECT * FROM DEPT;

EX) SMITH 사람의 JOB, DNAME, LOC 검색하고 싶다. --> JOIN 필요하다.


--테이블 생성
CREATE TABLE TEST1(
  ID VARCHAR2(3) PRIMARY KEY,
  NAME VARCHAR2(20),
  ADDR VARCHAR2(30)
);

--샘플데이터 추가
INSERT INTO TEST1 VALUES(1,'희정','서울');
INSERT INTO TEST1 VALUES(2,'나영','대구');
INSERT INTO TEST1 VALUES(3,'효리','제주도');
INSERT INTO TEST1 VALUES(4,'현솔','부산');
INSERT INTO TEST1 VALUES(5,'가현','서울');

SELECT * FROM TEST1;

CREATE TABLE TEST2(
 CODE CHAR(3) PRIMARY KEY,
 ID VARCHAR2(3) REFERENCES TEST1(ID),
 JOB VARCHAR2(30),
 SAL NUMBER(3)
);

--레코드 등록
INSERT INTO TEST2 VALUES('A01' , 1, '가수',400);
INSERT INTO TEST2 VALUES('A02' , 3, '배우',500);
INSERT INTO TEST2 VALUES('A03' , 5, '개그우먼',300);
INSERT INTO TEST2 VALUES('A04' , NULL, '백조',700);

SELECT * FROM TEST1;
SELECT * FROM TEST2;

EX) ID, NAME, ADDR, JOB, SAL 정보 검색하고 싶다.

1) INNER JOIN = EQ JOIN = 동등조인
 - SQL조인 방식
     SELECT  TEST1.ID , NAME, ADDR, JOB, SAL
     FROM TEST1 , TEST2
     WHERE TEST1.ID = TEST2.ID;
 
 
--테이블이름에 별칭만들기
   SELECT  T1.ID , NAME, ADDR, JOB, SAL
   FROM TEST1 T1 , TEST2 T2 --테이블이름에 별칭
   WHERE T1.ID = T2.ID;

-- 모든 컬럼 검색하기
   SELECT  *
   FROM TEST1 T1 , TEST2 T2 --테이블이름에 별칭
   WHERE T1.ID = T2.ID;
 
 
 -- ANSI 조인 방식 - 권장
 SELECT TEST1.ID, NAME, ADDR, JOB, SAL
 FROM TEST1 INNER JOIN TEST2 --INNER 단어는 생략가능하다.
 ON TEST1.ID = TEST2.ID; --조건식

--테이블 별칭만들기
  SELECT T1.ID, NAME, ADDR, JOB, SAL
  FROM TEST1 T1 JOIN TEST2  T2 --INNER 단어는 생략가능하다.
  ON T1.ID = T2.ID; -- PK와 참조컬럼(FK)의 이름이다를때 꼭 필요하다.
  
  * 위 문장을 USING()으로 변경하기
    SELECT ID, NAME, ADDR, JOB, SAL 
    FROM TEST1 T1 JOIN TEST2  T2 --INNER 단어는 생략가능하다.
    USING(ID); -- PK와 참조컬럼(FK)의 속성명이 같을때 사용한다.
      
      *USING을 사용할때 컬럼명에 별칭.  사용할수 없다.
      
  
 * 모든 컬럼검색
   SELECT *
   FROM TEST1 T1 JOIN TEST2  T2 --INNER 단어는 생략가능하다.
   ON T1.ID = T2.ID; 
  
    SELECT *
    FROM TEST1 T1 JOIN TEST2  T2 --INNER 단어는 생략가능하다.
    USING(ID);

 * natural JOIN 
   SELECT *
   FROM TEST1  NATURAL JOIN TEST2  --INNER 단어는 생략가능하다.
   
    * ON절 OR USING()을 사용 할수없다.
    * 양쪽에 같은 속성을 기반으로 모두 조인한다.
    
 EX) 
  CREATE TABLE COPY_TEST1
    AS SELECT * FROM TEST1;
    
  SELECT * FROM COPY_TEST1;
  ALTER TABLE COPY_TEST1 ADD PHONE VARCHAR2(20) DEFAULT '1111'
  
  SELECT * FROM COPY_TEST1;
  SELECT * FROM TEST1;
  
  --INNER JOIN + ON
   SELECT *
   FROM TEST1 INNER JOIN COPY_TEST1 
   ON TEST1.ID = COPY_TEST1.ID;
  
  --INNER JOIN + USING()
   SELECT *
   FROM TEST1 INNER JOIN COPY_TEST1 
   USING(ID)
  
  -- NATURAL JOIN
   SELECT *
   FROM TEST1 NATURAL JOIN COPY_TEST1 ;
   
   UPDATE COPY_TEST1 SET ADDR =NULL WHERE ID='3';
   
    
    
  -- 원하는 컬럼 선택
  SELECT TEST1.ID, NAME, ADDR, JOB, SAL
   FROM TEST1 INNER JOIN TEST2
   ON TEST1.ID = TEST2.ID;
    
 -----------------------------------------------------------
 --OUTE JOIN
  1) LEFT OUTER JOIN
  2) RIGHT OUTER JOIN
  3) FULL OUTER JOIN
  
  -SQL조인방식 코딩 -- FULL조인 지원안됨.
  SELECT *
  FROM TEST1 , TEST2
  WHERE TEST1.ID = TEST2.ID(+); --LEFT JOIN
  
   SELECT *
  FROM TEST1 , TEST2
  WHERE TEST1.ID(+) = TEST2.ID; --RIGHT JOIN
  
 
  
  -ANSI 조인 방식 코딩
  SELECT *
  FROM TEST1 LEFT  JOIN TEST2 -- LEFT OUTER JOIN
  USING(ID);
  
    SELECT *
  FROM TEST1 RIGHT  JOIN TEST2 -- RIGHT OUTER JOIN
  USING(ID);
  
    SELECT *
  FROM TEST1 FULL  JOIN TEST2 -- FULL OUTER JOIN
  USING(ID);
 
 
 * 3개 테이블 조인하기
 SELECT * FROM TEST2;
 
 CREATE TABLE TEST3(
   CODE CHAR(3)  PRIMARY KEY REFERENCES TEST2(CODE), --PK ,FK
   MANAGER_NAME VARCHAR2(20)
 );
 
 INSERT INTO TEST3 VALUES('A01','삼순이');
 INSERT INTO TEST3 VALUES('A02','삼식이');
 INSERT INTO TEST3 VALUES('A03','유재석');
 
 SELECT * FROM TEST1;
 SELECT * FROM  TEST2;
 SELECT * FROM TEST3;
 
 EX) ID, NAME, JOB, SAL, MANAGER_NAME 검색
 --SQL조인 방식
 SELECT TEST1.ID, NAME, JOB, SAL, MANAGER_NAME
 FROM TEST1 , TEST2, TEST3
 WHERE TEST1.ID=TEST2.ID AND TEST2.CODE = TEST3.CODE;
 
 SELECT *
 FROM TEST1 , TEST2, TEST3
 WHERE TEST1.ID=TEST2.ID AND TEST2.CODE = TEST3.CODE;
    
-- ANSI 조인 방식 - ON 
SELECT TEST1.ID, NAME, JOB, SAL, MANAGER_NAME
FROM TEST1 JOIN TEST2 
ON TEST1.ID = TEST2.ID JOIN TEST3 
ON TEST2.CODE =TEST3.CODE; 

-- ANSI 조인 방식 - USING    
 SELECT ID, NAME, JOB, SAL, MANAGER_NAME
 FROM TEST1 JOIN TEST2 
 USING(ID) JOIN TEST3 USING(CODE);
 
---------------------------------------------------------
--SELF JOIN
  : 자신 테이블을 두개로 만들어서 조인하는 것.
  : 재귀적관계일때 사용한다. - 하나의 테이블에서 일반속성이 자신테이블의
                               PK를 참조하는 것)


 --SCOTT계정으로 접속
SELECT * FROM EMP;

EX) 어떤 사원의 정보와 사원을 관리하는 관리자의 정보를 검색하고 싶다.

SELECT E1.ENAME 사원이름 , E1.MGR 관리자번호 , E2.ENAME 관리자이름
FROM EMP E1 JOIN EMP E2 -- E1은 사원, E2는 관리자
ON E1.MGR = E2.EMPNO;


 





