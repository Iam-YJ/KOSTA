/*
  숫자관련 함수
  1) round(숫자, 자리수) : 반올림
  2) trunc(숫자, 자리수) : 자리수에서 버림.
  3) ceil(숫자) : 올림해서 정수로
  4) floor( 숫자) : 내림해서 정수로
  5) mod(숫자, 나눌수) : 나머지 
*/

45.12457

SELECT 45.12457  AS 숫자, '안녕' 문자 FROM DUAL;

EX)
SELECT 45.457843 , ROUND(45.457843, 0) , ROUND(45.457843, 1) ,ROUND(45.457843, 2),
       ROUND(45.457843, -1) , ROUND(45.457843, -2)
FROM DUAL;

SELECT 45.457843 , TRUNC(45.457843, 0) , TRUNC(45.457843, 1) ,TRUNC(45.457843, 2),
       TRUNC(45.457843, -1) , TRUNC(45.457843, -2)
FROM DUAL;

SELECT 45.457843 , ceil(45.45784) , FLOOR(45.457843) 
FROM DUAL;

SELECT 45.457843 , MOD(45.45784, 7) ,MOD( CEIL(45.45784) , 7)
FROM DUAL;

SELECT SYSDATE FROM DUAL;
----------------------------------------------------------------------------
/*
  -문자열함수
   1) UPPER(문자열) : 모두 대문자로 변환
   2) LOWER(문자열) : 모두 소문자로 변환
   3) INITCAP(문자열) : 단어의 첫글자 대문자로 변환
   
   4) LENGTH(문자열) : 문자열의 길이
   
   5) 문자열에서 일부분의 문자열을 추출할때
      SUBSTR(문자열,시작INDEX) : 시작INDEX부터 끝까지 추출 ( INDEX은 1 부터시작)
      SUBSTR(문자열,시작INDEX , 개수) :시작INDEX부터 개수까지 추출
      
   6) 문자열에서 특정 문자가 어디(INDEX)에 있는지 찾기(결과 INDEX로 나온다)
      INSTR(문자열, 찾는문자열)
      INSTR(문자열, 찾는문자열 , 시작위치) : 시작위치를 -1 을 주면 오른쪽부터 검색
                                             시작위치를 2를 주면 2번째 INDEX부터 찾기시작
                                             
      INSTR(문자열, 찾는문자열, 시작위치 , 몇번째출헌)
      
       - 찾는 문자열이 없으면 0

*/

SELECT 'JANG hee juNg' , UPPER('JANG hee juNg') , LOWER('JANG hee juNg'), 
       INITCAP('JANG hee juNg') , LENGTH('JANG hee juNg')
FROM DUAL;

EX) SUBSTR
SELECT 'ABCDE ABCDE ABCDE' , SUBSTR('ABCDE ABCDE ABCDE' , 3) ,
       SUBSTR('ABCDE ABCDE ABCDE', 3,5)
FROM DUAL;

EX) INSTR
SELECT 'ABCDE ABCDE ABCDE' , INSTR('ABCDE ABCDE ABCDE','C') ,
   INSTR('ABCDE ABCDE ABCDE','C', 5) , INSTR('ABCDE ABCDE ABCDE','C' , -1),
   INSTR('ABCDE ABCDE ABCDE','C', 2, 2),INSTR('ABCDE ABCDE ABCDE','G')
FROM DUAL;


EX) SCOTT계정으로 접속한다.
  : EMP테이블에서 JOB의 세번째글자가 'A' 레코드 검색
  
  SELECT * FROM EMP;
 --LIKE
 SELECT * FROM EMP WHERE UPPER(JOB) LIKE UPPER('__A%');
 
 --SUBSTR : 결과 문자
 SELECT JOB, SUBSTR(JOB,3,1) FROM EMP;
 
 SELECT * FROM EMP WHERE SUBSTR(JOB,3,1)='A';
  
 --INSTR : 숫자
 SELECT JOB, INSTR(JOB,'A',3) FROM EMP;
 
 SELECT * FROM EMP WHERE INSTR(JOB,'A',3)=3;
 --------------------------------------------------------------
 /*
   --날짜관련 함수
   1) SYSDATE
   2) MONTHS_BETWEEN(날짜, 날짜) : 두 날짜 사아의 개월수의 차
   3) ADD_MONTHS(날짜, 숫자) : 날짜에 숫자만큼 개월수 더하기
   4) NEXT_DAY(날짜, 요일) : 날짜를 기준으로 가장 가까운 요일의 날짜 구하기
               * 요일 - 1(일)  , 2(월) , 3(화) .... 7(토)
               
   5) LAST_DAY(날짜) : 날짜에 해댱하는 달의 마지막 일을 구한다.
   
   --형변환 함수
    1) TO_CHAR() :  문자로 변환
    2) TO_DATE() : 날짜로 변환
    3) TO_NUMBER() : 숫자로 변환
 */
 
 EX) 오늘날짜를 기준으로 가장 가까운 일요일 구하기
 SELECT SYSDATE, NEXT_DAY(SYSDATE, 1) FROM DUAL; 
 SELECT SYSDATE, NEXT_DAY(SYSDATE, 3) FROM DUAL; 
 
 
 EX) 우리가 만난지 100일 되는 날??
 SELECT TO_DATE('2020-07-22') + 100 FROM DUAL;
 SELECT SYSDATE+100 FROM DUAL;
 
 
 EX) SCOTT계정의 EMP테이블에서 현재까지 근무 개월수 , 몇년근무  구하기
 SELECT * FROM EMP;
 
 SELECT ENAME, HIREDATE, FLOOR(MONTHS_BETWEEN(SYSDATE, HIREDATE)) || '개월' AS 총근무개월  ,
 CEIL(FLOOR(MONTHS_BETWEEN(SYSDATE, HIREDATE))/12) AS 년차
 FROM EMP;
 
 
 EX) 현재 달의 마지막 일 언제인지??
 SELECT LAST_DAY(SYSDATE) FROM DUAL;
 
 --ADD_MONTHS(날짜, 숫자)
 SELECT ADD_MONTHS(SYSDATE, 5) , TO_CHAR(ADD_MONTHS(SYSDATE, 5) , 'YYYY-MM-DD') 
 FROM DUAL;  -- 2021-01-23
 
 SELECT SYSDATE , TO_CHAR(SYSDATE, 'YYYY-MM-DD'),
                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS'),
                   TO_CHAR(SYSDATE, 'HH:MI:SS'), TO_CHAR(SYSDATE, 'YYYY')
 FROM DUAL;
 
 EX) EMP테이블에서 각 사원의 입사년도 검색
 SELECT ENAME, HIREDATE , TO_CHAR(HIREDATE, 'YYYY') FROM EMP;
 
 EX) 숫자를 3자리마다 콤마...
 
 SELECT 2457000 , TO_CHAR(2457000,'999,999,999') FROM DUAL;
 
 SELECT SAL, TO_CHAR(SAL, '999,999') FROM EMP;
 
 SELECT TO_NUMBER('1000') + 10 FROM DUAL;
 
 -------------------------------------------------
 /*
   SELECT절에서 사용할 수 있는 조건식
   
   1) DECODE(대상 , 값, 문장, 값, 문장,....문장)
       : 비교대상의 값이 정확하게 일치할때 사용한다.
         조건의 범위를 비교할때는 사용할수 없다.
      
      
   2) CASE [대상]
        WHEN 조건식 THEN 문장
        WHEN 조건식 THEN 문장
        WHEN 조건식 THEN 문장
        ..
        ELSE 문장
      END 
 */
 
 SELECT * FROM EMP;
 
 EX) EMP테이블에서 DEPNO가 10 이면 관리부, 20이면 총무부, 30이면 영업부 
     이외의 값은 기타부 로 출력하고 컬럼명은 부서명 으로 한다.
     (DECODE, CASE END)
    --DECODE
    SELECT EMPNO, ENAME, DEPTNO , 
    DECODE(DEPTNO,10,'관리부',20,'총무부',30,'영업부','기타부') AS 부서명
    FROM EMP order by 부서명;
    
    
    
    --CASE END
    SELECT EMPNO, ENAME, DEPTNO ,
    CASE DEPTNO
     WHEN 10 THEN '관리부'
     WHEN 20 THEN '총무부'
     WHEN 30 THEN '영업부'
     ELSE '기타부'
    END AS 부서명
    FROM EMP ORDER BY 부서명;
    
    ---------------------
    SELECT EMPNO, ENAME, DEPTNO ,
    CASE 
     WHEN DEPTNO=10 THEN '관리부'
     WHEN DEPTNO=20 THEN '총무부'
     WHEN DEPTNO=30 THEN '영무부'
     ELSE '기타부'
    END AS 부서명
    FROM EMP;
     
     
     

ex)job이 manager인 경우 sal*0.1, ANALYST 인경우는   sal *0.2
     SALESMAN인 경우는 sal * 0.3을 구해서 성과급 필드를 만든다.
      (case end, decode 다 해본다) 
    
    --DCODE
    SELECT EMPNO, ENAME ,JOB , SAL ,
    DECODE(LOWER(JOB),'manager', SAL*01 , 'analyst',sal*0.2 , 'salesman',sal*0.3, 0) AS 성과급
    FROM EMP;
    
    --case end
    SELECT EMPNO, ENAME, JOB, SAL,
    CASE LOWER(JOB)
     WHEN 'manager' THEN SAL*0.1
     WHEN 'analyst' THEN SAL*0.2
     WHEN 'salesman' THEN SAL*0.3
     ELSE 0
    END AS 성과급
    FROM EMP
    ORDER BY JOB;


ex) sal이 2000이하이면 '저소득층'
      sal이 2001 ~ 4000사이면 '중산층'
      sal이 4001 이상이면 '고소득층'  구하여 등급 별칭 해준다.
      (case end) 

 SELECT EMPNO, ENAME, JOB, SAL , 
 CASE 
    WHEN SAL <= 2000 THEN '저소득층'
    WHEN SAL BETWEEN 2001 AND 4000 THEN '중산층'
    ELSE '고소득층'
 END AS 등급
 FROM EMP
 ORDER BY SAL;
 
 











